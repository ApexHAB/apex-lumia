<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (c) Microsoft Corporation.  All rights reserved.
-->
<doc>
  <assembly>
    <name>Microsoft.Phone.Reactive</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Phone.Reactive.AsyncLock">
      <summary>Runs at most one action at a time.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.AsyncLock.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.Phone.Reactive.AsyncLock" /> class.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.AsyncLock.Wait(System.Action)">
      <summary>Sets an action to be run.</summary>
      <param name="action"></param>
    </member>
    <member name="T:Microsoft.Phone.Reactive.AsyncSubject`1">
      <summary>Represents the result of an asynchronous operation.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.AsyncSubject`1.#ctor">
      <summary>Creates a subject that can only receive one value and that value is cached for all future observations.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.AsyncSubject`1.#ctor(Microsoft.Phone.Reactive.IScheduler)">
      <summary>Creates a subject that can only receive one value and that value is cached for all future observations. </summary>
      <param name="scheduler"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.AsyncSubject`1.OnCompleted">
      <summary>Notifies all subscribed observers of the end of the sequence. </summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.AsyncSubject`1.OnError(System.Exception)">
      <summary>Notifies all subscribed observers with the exception.</summary>
      <param name="exception"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.AsyncSubject`1.OnNext(`0)">
      <summary>Notifies all subscribed observers with the value.</summary>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.AsyncSubject`1.Subscribe(System.IObserver{`0})">
      <summary>Subscribes an observer to the subject.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="observer"></param>
    </member>
    <member name="T:Microsoft.Phone.Reactive.BehaviorSubject`1">
      <summary>Represents a value that changes over time.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.BehaviorSubject`1.#ctor(`0)">
      <summary>Creates a subject that caches its last value and starts with the specified value.</summary>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.BehaviorSubject`1.#ctor(`0,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Creates a subject that caches its last value and starts with the specified value.
</summary>
      <param name="value"></param>
      <param name="scheduler"></param>
    </member>
    <member name="T:Microsoft.Phone.Reactive.BooleanDisposable">
      <summary> Represents an IDisposable that can be checked for status. </summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.BooleanDisposable.#ctor">
      <summary> Constructs a new undisposed BooleanDisposable.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.BooleanDisposable.Dispose">
      <summary> Sets the status to Disposed.</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.BooleanDisposable.IsDisposed">
      <summary> Gets a value indicating whether or not the object is disposed. </summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.CompositeDisposable">
      <summary>Represents a group of Disposables that are disposed together.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CompositeDisposable.#ctor(System.IDisposable[])">
      <summary>Constructs a GroupDisposable from a group of disposables.</summary>
      <param name="disposables"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CompositeDisposable.Add(System.IDisposable)">
      <summary>Adds a disposable to the GroupDisposable or disposes the disposable if the GroupDisposable is disposed.</summary>
      <param name="disposable"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CompositeDisposable.Clear">
      <summary>Removes and disposes all disposables from the GroupDisposable, but does not dispose the GroupDisposable.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CompositeDisposable.Contains(System.IDisposable)">
      <summary>Determines whether the GroupDisposable contains a specific disposable.</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="disposable"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CompositeDisposable.CopyTo(System.IDisposable[],System.Int32)">
      <summary>Copies the disposables contained in the GroupDisposable to an Array, starting at a particular Array index.</summary>
      <param name="array"></param>
      <param name="arrayIndex"></param>
    </member>
    <member name="P:Microsoft.Phone.Reactive.CompositeDisposable.Count">
      <summary>Gets the number of disposables contained in the GroupDisposable.</summary>
      <returns>Returns 
<see cref="T:System.Int32" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CompositeDisposable.Dispose">
      <summary>Disposes all disposables in the group and removes them from the group.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CompositeDisposable.GetEnumerator">
      <summary>Returns an enumerator that iterates through the GroupDisposable.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.IEnumerator`1" />
.</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.CompositeDisposable.IsReadOnly">
      <summary>Always returns false.</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CompositeDisposable.Remove(System.IDisposable)">
      <summary>Removes and disposes the first occurrence of a disposable from the GroupDisposable.</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="disposable"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CompositeDisposable.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the GroupDisposable.</summary>
      <returns>Returns IEnumerator.</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.ConnectableObservable`1">
      <summary>Represents an observable that can be connected and disconnected from its source.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ConnectableObservable`1.#ctor(System.IObservable{`0})">
      <summary>Creates an observable that can be connected and disconnected from its source.</summary>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ConnectableObservable`1.#ctor(System.IObservable{`0},Microsoft.Phone.Reactive.ISubject{`0})">
      <summary>Creates an observable that can be connected and disconnected from its source.</summary>
      <param name="source"></param>
      <param name="subject"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ConnectableObservable`1.Connect">
      <summary>Connects the observable to its source.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ConnectableObservable`1.Subscribe(System.IObserver{`0})">
      <summary>Subscribes an observer to the observable sequence.
</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="observer"></param>
    </member>
    <member name="T:Microsoft.Phone.Reactive.ContextDisposable">
      <summary>Represents a thread-affine IDisposable.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ContextDisposable.#ctor(System.Threading.SynchronizationContext,System.IDisposable)">
      <summary>Constructs a ContextDisposable that uses a SynchronziationContext on which to dipose the disposable.</summary>
      <param name="context"></param>
      <param name="disposable"></param>
    </member>
    <member name="P:Microsoft.Phone.Reactive.ContextDisposable.Context">
      <summary>Gets the provided SynchronizationContext.</summary>
      <returns>Returns 
<see cref="T:System.Threading.SynchronizationContext" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ContextDisposable.Dispose">
      <summary>Disposes the wrapped disposable on the provided SynchronizationContext.</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.CurrentThreadScheduler">
      <summary>Represents an object that schedules units of work on the current thread.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CurrentThreadScheduler.EnsureTrampoline(System.Action)">
      <summary>Ensures action is surrounded by a trampoline.</summary>
      <param name="action"></param>
    </member>
    <member name="P:Microsoft.Phone.Reactive.CurrentThreadScheduler.Now">
      <summary>Gets the scheduler's notion of current time.
</summary>
      <returns>Returns 
<see cref="T:System.DateTimeOffset" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CurrentThreadScheduler.Schedule(System.Action)">
      <summary>Schedules an action to be executed.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="action"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.CurrentThreadScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>Schedules action to be executed after the specified time span.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="action"></param>
      <param name="dueTime"></param>
    </member>
    <member name="T:Microsoft.Phone.Reactive.DispatcherObservableExtensions">
      <summary>Provides a set of static methods for subscribing to IObservables using Dispatchers.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.DispatcherObservableExtensions.ObserveOn``1(System.IObservable{``0},System.Windows.Threading.Dispatcher)">
      <summary>Asynchronously notify observers using the dispatcher.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="dispatcher"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.DispatcherObservableExtensions.SubscribeOn``1(System.IObservable{``0},System.Windows.Threading.Dispatcher)">
      <summary>Asynchronously subscribes and unsubscribes observers using the dispatcher.
</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="dispatcher"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.DispatcherScheduler">
      <summary>Represents an object that schedules units of work on a Dispatcher.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.DispatcherScheduler.#ctor(System.Windows.Threading.Dispatcher)">
      <summary>Constructs an DispatcherScheduler that schedules units of work on dispatcher.</summary>
      <param name="dispatcher"></param>
    </member>
    <member name="P:Microsoft.Phone.Reactive.DispatcherScheduler.Dispatcher">
      <summary>Gets the dispatcher associated with the DispatcherScheduler.</summary>
      <returns>Returns 
<see cref="T:System.Windows.Threading.Dispatcher" />
.</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.DispatcherScheduler.Now">
      <summary>Gets the scheduler's notion of current time.</summary>
      <returns>Returns 
<see cref="T:System.DateTimeOffset" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.DispatcherScheduler.Schedule(System.Action)">
      <summary>Schedules action to be executed on the dispatcher.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="action"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.DispatcherScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>Schedules action to be executed on the dispatcher after the specified time span.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="action"></param>
      <param name="dueTime"></param>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Disposable">
      <summary>Provides a set of static methods for creating Disposables.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Disposable.Create(System.Action)">
      <summary>Creates the disposable that invokes dispose when disposed.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="dispose"></param>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Disposable.Empty">
      <summary>Represents the disposable that does nothing when disposed.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Event">
      <summary>Provides a set of static methods for creating events.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Event.Create``1(System.Object,``0)">
      <summary>Creates an instance of the IEvent interface.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.IEvent`1" />
.</returns>
      <param name="sender"></param>
      <param name="eventArgs"></param>
      <typeparam name="TEventArgs"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.ExceptionExtensions">
      <summary>Provides a set of static methods for exceptions.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ExceptionExtensions.PrepareForRethrow(System.Exception)">
      <summary>Preserve callstack when rethrowing.</summary>
      <returns>Returns 
<see cref="T:System.Exception" />
.</returns>
      <param name="exception"></param>
    </member>
    <member name="T:Microsoft.Phone.Reactive.IConnectableObservable`1">
      <summary>Represents an observable that can be connected and disconnected.
</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.IConnectableObservable`1.Connect">
      <summary>Connects the observable.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.IEvent`1">
      <summary>Represents the Sender and EventArg values of a .NET event. </summary>
      <typeparam name="TEventArgs"></typeparam>
    </member>
    <member name="P:Microsoft.Phone.Reactive.IEvent`1.EventArgs">
      <summary> Gets the event arguments value of the event.</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.IEvent`1.Sender">
      <summary> Gets the sender value of the event. </summary>
      <returns>Returns 
<see cref="T:System.Object" />
.</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.IGroupedObservable`2">
      <summary> Represents an observable sequence of values that have a common key.</summary>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TElement"></typeparam>
    </member>
    <member name="P:Microsoft.Phone.Reactive.IGroupedObservable`2.Key">
      <summary>Gets the common key.
</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.ImmediateScheduler">
      <summary>Represents an object that schedules units of work to run immediately on the current thread.</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.ImmediateScheduler.Now">
      <summary>Gets the scheduler's notion of current time.
</summary>
      <returns>Returns 
<see cref="T:System.DateTimeOffset" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ImmediateScheduler.Schedule(System.Action)">
      <summary>Schedules action to be executed.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="action"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ImmediateScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>Schedules action to be executed after the specified time span.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="action"></param>
      <param name="dueTime"></param>
    </member>
    <member name="T:Microsoft.Phone.Reactive.IObserver`2">
      <summary>Supports push-style iteration over an observable sequence.</summary>
      <typeparam name="TValue"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.IObserver`2.OnCompleted">
      <summary>Notifies the observer of the end of the sequence.</summary>
      <returns>Returns 
<see cref="{0}" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.IObserver`2.OnError(System.Exception)">
      <summary>Notifies the observer that an exception has occurred.</summary>
      <returns>Returns 
<see cref="{0}" />
.</returns>
      <param name="exception"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.IObserver`2.OnNext(`0)">
      <summary>Notifies the observer of a new value in the sequence.
</summary>
      <returns>Returns 
<see cref="{0}" />
.</returns>
      <param name="value"></param>
    </member>
    <member name="T:Microsoft.Phone.Reactive.IScheduler">
      <summary>Represents an object that schedules units of work.</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.IScheduler.Now">
      <summary>Gets the scheduler's notion of current time.
</summary>
      <returns>Returns 
<see cref="T:System.DateTimeOffset" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.IScheduler.Schedule(System.Action)">
      <summary>Schedules an action to be executed.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="action"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.IScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>Schedules action to be executed after the specified time span.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="action"></param>
      <param name="dueTime"></param>
    </member>
    <member name="T:Microsoft.Phone.Reactive.ISubject`1">
      <summary>Represents an object that is both an observable sequence as well as an observer.
</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.ISubject`2">
      <summary>Represents an object that is both an observable sequence as well as an observer.
</summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.MutableDisposable">
      <summary>Represents a disposable whose underlying disposable can be swapped for another disposable.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.MutableDisposable.#ctor">
      <summary>Constructs a new MutableDisposable with no current underlying disposable.</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.MutableDisposable.Disposable">
      <summary>Gets a value indicating whether the MutableDisposable has an underlying disposable.
</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.MutableDisposable.Dispose">
      <summary>Disposes the underlying disposable as well as all future replacements.</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.NewThreadScheduler">
      <summary>Represents an object that schedules units of work on the current thread.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.NewThreadScheduler.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.Phone.Reactive.NewThreadScheduler" /> class.</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.NewThreadScheduler.Now">
      <summary>Gets the scheduler's notion of current time.
</summary>
      <returns>Returns 
<see cref="T:System.DateTimeOffset" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.NewThreadScheduler.Schedule(System.Action)">
      <summary>Schedules an action to be executed.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="action"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.NewThreadScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>Schedules action to be executed after the specified time span.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="action"></param>
      <param name="dueTime"></param>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Notification">
      <summary>Represents a message sent to an observer.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification.ToObservable``1(Microsoft.Phone.Reactive.Notification{``0})">
      <summary>Converts the <see cref="T:Microsoft.Phone.Reactive.Notification" /> to an <see cref="T:Microsoft.Phone.Reactive.Observable" />.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="notification"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification.ToObservable``1(Microsoft.Phone.Reactive.Notification{``0},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Converts the <see cref="T:Microsoft.Phone.Reactive.Notification" /> to an <see cref="T:Microsoft.Phone.Reactive.Observable" />.
</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="notification"></param>
      <param name="scheduler"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Notification`1">
      <summary> Represents a notification to an observer.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.Accept``1(Microsoft.Phone.Reactive.IObserver{`0,``0})">
      <summary>Invokes the observer's method corresponding to the notification and returns the produced result.</summary>
      <returns>N/A</returns>
      <param name="observer"></param>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
      <summary>Invokes the delegate corresponding to the notification.</summary>
      <param name="onNext"></param>
      <param name="onError"></param>
      <param name="onCompleted"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
      <summary>Invokes the delegate corresponding to the notification and returns the produced result.</summary>
      <returns>N/A
</returns>
      <param name="onNext"></param>
      <param name="onError"></param>
      <param name="onCompleted"></param>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.Accept(System.IObserver{`0})">
      <summary>Invokes the observer's method corresponding to the notification.</summary>
      <param name="observer"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.Equals(Microsoft.Phone.Reactive.Notification{`0})">
      <summary>Indicates whether this instance and other are equal.</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="other"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal. </summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="obj"></param>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.Exception">
      <summary> Returns the exception of an OnError notification or returns null.</summary>
      <returns>Returns 
<see cref="T:System.Exception" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>Returns 
<see cref="T:System.Int32" />
.</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.HasValue">
      <summary> Returns whether the notification has a value.</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.Kind">
      <summary> Gets the kind of notification that is represented.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.NotificationKind" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.op_Equality(Microsoft.Phone.Reactive.Notification{`0},Microsoft.Phone.Reactive.Notification{`0})">
      <summary>Indicates whether left and right are equal.</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="left"></param>
      <param name="right"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.op_Inequality(Microsoft.Phone.Reactive.Notification{`0},Microsoft.Phone.Reactive.Notification{`0})">
      <summary>Indicates whether left and right are not equal.</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="left"></param>
      <param name="right"></param>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.Value">
      <summary>Returns the value of an OnNext notification or throws an exception. </summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Notification`1.OnCompleted">
      <summary>Represents a OnCompleted notification to an observer.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnCompleted.#ctor">
      <summary>Constructs a notification of the end of a sequence.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnCompleted.Accept``1(Microsoft.Phone.Reactive.IObserver{`0,``0})">
      <summary>Invokes the observer's method corresponding to the notification and returns the produced result. (Inherited from <see cref="T:Microsoft.Phone.Reactive.Notification`1" />)</summary>
      <returns>Returns 
<see cref="{0}" />
.</returns>
      <param name="observer"></param>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnCompleted.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
      <summary>Invokes the observer’s method or delegate corresponding to the notification.</summary>
      <param name="onNext"></param>
      <param name="onError"></param>
      <param name="onCompleted"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnCompleted.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
      <summary>Invokes the delegate corresponding to the notification and returns the produced result. (Inherited from <see cref="T:Microsoft.Phone.Reactive.Notification`1" />)</summary>
      <returns>Returns 
<see cref="{0}" />
.</returns>
      <param name="onNext"></param>
      <param name="onError"></param>
      <param name="onCompleted"></param>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnCompleted.Accept(System.IObserver{`0})">
      <summary>Invokes the observer's method corresponding to the notification. 
(Inherited from <see cref="T:Microsoft.Phone.Reactive.Notification`1" />)</summary>
      <param name="observer"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnCompleted.Equals(Microsoft.Phone.Reactive.Notification{`0})">
      <summary>Indicates whether this instance and other are equal. (Inherited from <see cref="T:Microsoft.Phone.Reactive.Notification`1" />)</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="other"></param>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnCompleted.Exception">
      <summary>Returns null.</summary>
      <returns>Returns 
<see cref="T:System.Exception" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnCompleted.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>Returns 
<see cref="T:System.Int32" />
.</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnCompleted.HasValue">
      <summary>Returns false.</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnCompleted.Kind">
      <summary>Returns <see cref="F:Microsoft.Phone.Reactive.NotificationKind.OnCompleted" />.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.NotificationKind" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnCompleted.ToString">
      <summary>Returns a string representation of this instance.</summary>
      <returns>Returns 
<see cref="T:System.String" />
.</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnCompleted.Value">
      <summary>Throws an InvalidOperationException.
</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Notification`1.OnError">
      <summary>Represents an OnError notification to an observer.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnError.#ctor(System.Exception)">
      <summary>Constructs a notification of an exception.</summary>
      <param name="exception"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnError.Accept``1(Microsoft.Phone.Reactive.IObserver{`0,``0})">
      <summary>Invokes the observer's method corresponding to the notification and returns the produced result. (Inherited from <see cref="T:Microsoft.Phone.Reactive.Notification`1" />)</summary>
      <returns>Returns 
<see cref="{0}" />
.</returns>
      <param name="observer"></param>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnError.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
      <summary>Invokes the delegate corresponding to the notification. (Inherited from <see cref="T:Microsoft.Phone.Reactive.Notification`1" />)</summary>
      <param name="onNext"></param>
      <param name="onError"></param>
      <param name="onCompleted"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnError.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
      <summary>Invokes the delegate corresponding to the notification and returns the produced result. (Inherited from <see cref="T:Microsoft.Phone.Reactive.Notification`1" />)
</summary>
      <returns>Returns 
<see cref="{0}" />
.</returns>
      <param name="onNext"></param>
      <param name="onError"></param>
      <param name="onCompleted"></param>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnError.Accept(System.IObserver{`0})">
      <summary>Invokes the observer's method corresponding to the notification. (Inherited from <see cref="T:Microsoft.Phone.Reactive.Notification`1" />)</summary>
      <param name="observer"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnError.Equals(Microsoft.Phone.Reactive.Notification{`0})">
      <summary>Indicates whether this instance and other are equal</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="other"></param>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnError.Exception">
      <summary>Returns the exception.</summary>
      <returns>Returns 
<see cref="T:System.Exception" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnError.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>Returns 
<see cref="T:System.Int32" />
.</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnError.HasValue">
      <summary>Returns false.</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnError.Kind">
      <summary>Returns <see cref="F:Microsoft.Phone.Reactive.NotificationKind.OnError" />.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.NotificationKind" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnError.ToString">
      <summary>Returns a string representation of this instance.</summary>
      <returns>Returns 
<see cref="T:System.String" />
.</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnError.Value">
      <summary>Throws the exception.</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Notification`1.OnNext">
      <summary>Represents an OnNext notification to an observer.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnNext.#ctor(`0)">
      <summary>Constructs a notification of a new value.</summary>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnNext.Accept``1(Microsoft.Phone.Reactive.IObserver{`0,``0})">
      <summary>Invokes the observer's method corresponding to the notification and returns the produced result.  (Inherited from <see cref="T:Microsoft.Phone.Reactive.Notification`1" />)</summary>
      <returns>Returns 
<see cref="{0}" />
.</returns>
      <param name="observer"></param>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnNext.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
      <summary>Invokes the delegate corresponding to the notification.  (Inherited from <see cref="T:Microsoft.Phone.Reactive.Notification`1" />)</summary>
      <param name="onNext"></param>
      <param name="onError"></param>
      <param name="onCompleted"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnNext.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
      <summary>Invokes the delegate corresponding to the notification and returns the produced result.  (Inherited from <see cref="T:Microsoft.Phone.Reactive.Notification`1" />)</summary>
      <returns>Returns 
<see cref="{0}" />
.</returns>
      <param name="onNext"></param>
      <param name="onError"></param>
      <param name="onCompleted"></param>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnNext.Accept(System.IObserver{`0})">
      <summary>Invokes the observer's method corresponding to the notification. (Inherited from <see cref="T:Microsoft.Phone.Reactive.Notification`1" />)</summary>
      <param name="observer"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnNext.Equals(Microsoft.Phone.Reactive.Notification{`0})">
      <summary>Indicates whether this instance and another are equal.</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="other"></param>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnNext.Exception">
      <summary>Returns null.</summary>
      <returns>Returns 
<see cref="T:System.Exception" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnNext.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>Returns 
<see cref="T:System.Int32" />
.</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnNext.HasValue">
      <summary>Returns true.</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnNext.Kind">
      <summary>Returns <see cref="F:Microsoft.Phone.Reactive.NotificationKind.OnNext" />.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.NotificationKind" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Notification`1.OnNext.ToString">
      <summary>Returns a string representation of this instance.</summary>
      <returns>Returns 
<see cref="T:System.String" />
.</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Notification`1.OnNext.Value">
      <summary>Returns <see cref="F:Microsoft.Phone.Reactive.NotificationKind.OnNext" />.</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.NotificationKind">
      <summary>Enumerates the kinds of notifications that may be invoked.</summary>
    </member>
    <member name="F:Microsoft.Phone.Reactive.NotificationKind.OnNext">
      <summary>An OnNext notification.
</summary>
    </member>
    <member name="F:Microsoft.Phone.Reactive.NotificationKind.OnError">
      <summary>An OnError notification.</summary>
    </member>
    <member name="F:Microsoft.Phone.Reactive.NotificationKind.OnCompleted">
      <summary>An OnCompleted notification.</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Observable">
      <summary>Provides a set of static methods for query operations over observable sequences.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Aggregate``1(System.IObservable{``0},System.Func{``0,``0,``0})">
      <summary> Applies an accumulator function over an observable sequence. The specified seed value is used as the initial accumulator value.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="accumulator"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Aggregate``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})">
      <summary>  Applies an accumulator function over an observable sequence. The specified seed value is used as the initial accumulator value.  </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="seed"></param>
      <param name="accumulator"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TAccumulate"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.All``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary> Determines whether all values of an observable sequence satisfy a condition.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="predicate"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Amb``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>Returns the observable sequence that reacts first.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="sources"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})">
      <summary>  Returns the observable sequence that reacts first. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="leftSource"></param>
      <param name="rightSource"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Amb``1(System.IObservable{``0}[])">
      <summary>  Returns the observable sequence that reacts first. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="sources"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.And``2(System.IObservable{``0},System.IObservable{``1})">
      <summary> Matches when both observable sequences have an available value.  </summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.Pattern`2" />
.</returns>
      <param name="left"></param>
      <param name="right"></param>
      <typeparam name="TLeft"></typeparam>
      <typeparam name="TRight"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Any``1(System.IObservable{``0})">
      <summary>  Determines whether an observable sequence contains any values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Any``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>  Determines whether an observable sequence contains any values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="predicate"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.AsObservable``1(System.IObservable{``0})">
      <summary>Hides the identity of an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Average(System.IObservable{System.Decimal})">
      <summary> Computes the average of an observable sequence of values. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Average(System.IObservable{System.Double})">
      <summary> Computes the average of an observable sequence of values. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Average(System.IObservable{System.Int32})">
      <summary> Computes the average of an observable sequence of values. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Average(System.IObservable{System.Int64})">
      <summary> Computes the average of an observable sequence of values. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Average(System.IObservable{System.Nullable{System.Decimal}})">
      <summary> Computes the average of an observable sequence of values. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Average(System.IObservable{System.Nullable{System.Double}})">
      <summary> Computes the average of an observable sequence of values. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Average(System.IObservable{System.Nullable{System.Int32}})">
      <summary> Computes the average of an observable sequence of values. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Average(System.IObservable{System.Nullable{System.Int64}})">
      <summary> Computes the average of an observable sequence of values. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Average(System.IObservable{System.Nullable{System.Single}})">
      <summary> Computes the average of an observable sequence of values. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Average(System.IObservable{System.Single})">
      <summary> Computes the average of an observable sequence of values. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.BufferWithCount``1(System.IObservable{``0},System.Int32)">
      <summary>   Projects each value of an observable sequence into a buffer. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="count"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.BufferWithCount``1(System.IObservable{``0},System.Int32,System.Int32)">
      <summary>   Projects each value of an observable sequence into a buffer. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="count"></param>
      <param name="skip"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.BufferWithTime``1(System.IObservable{``0},System.TimeSpan)">
      <summary>   Projects each value of an observable sequence into a buffer.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="timeSpan"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.BufferWithTime``1(System.IObservable{``0},System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
      <summary>  Projects each value of an observable sequence into a buffer.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="timeSpan"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.BufferWithTime``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan)">
      <summary>   Projects each value of an observable sequence into a buffer.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="timeSpan"></param>
      <param name="timeShift"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.BufferWithTime``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
      <summary>   Projects each value of an observable sequence into a buffer.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="timeSpan"></param>
      <param name="timeShift"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.BufferWithTimeOrCount``1(System.IObservable{``0},System.TimeSpan,System.Int32)">
      <summary>Projects each value of an observable sequence into a buffer that's sent out when either it's full or a given amount of time has elapsed.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="timeSpan"></param>
      <param name="count"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.BufferWithTimeOrCount``1(System.IObservable{``0},System.TimeSpan,System.Int32,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Projects each value of an observable sequence into a buffer that's sent out when either it's full or a given amount of time has elapsed.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="timeSpan"></param>
      <param name="count"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}})">
      <summary>Uses selector to determine which source in sources to use, empty if no match is found.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="selector"></param>
      <param name="sources"></param>
      <typeparam name="TValue"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Uses selector to determine which source in sources to use, empty if no match is found.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="selector"></param>
      <param name="sources"></param>
      <param name="scheduler"></param>
      <typeparam name="TValue"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}},System.IObservable{``1})">
      <summary>Uses selector to determine which source in sources to use, uses the specified default source if no match is found.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="selector"></param>
      <param name="sources"></param>
      <param name="defaultSource"></param>
      <typeparam name="TValue"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Cast``1(System.IObservable{System.Object})">
      <summary>  Casts values to the given type.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Catch``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>Continues an observable sequence that is terminated by an exception with the next observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="sources"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Catch``2(System.IObservable{``0},System.Func{``1,System.IObservable{``0}})">
      <summary> Continues an observable sequence that is terminated by an exception with the next observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="handler"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TException"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Catch``1(System.IObservable{``0},System.IObservable{``0})">
      <summary> Continues an observable sequence that is terminated by an exception with the next observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="first"></param>
      <param name="second"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Catch``1(System.IObservable{``0}[])">
      <summary> Continues an observable sequence that is terminated by an exception with the next observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="sources"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.CombineLatest``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
      <summary>  Merges two observable sequences into one observable sequence by using the selector function whenever one of the observable sequences has a new value.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="leftSource"></param>
      <param name="rightSource"></param>
      <param name="selector"></param>
      <typeparam name="TLeft"></typeparam>
      <typeparam name="TRight"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Concat``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>Concatenates all the observable sequences.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="sources"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Concat``1(System.IObservable{``0},System.IObservable{``0})">
      <summary> Concatenates two observable sequences.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="first"></param>
      <param name="second"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Concat``1(System.IObservable{``0}[])">
      <summary> Concatenates all the observable sequences.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="sources"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Contains``1(System.IObservable{``0},``0)">
      <summary> Determines whether an observable sequence contains a specified value by using the default comparer.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="value"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Contains``1(System.IObservable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines whether an observable sequence contains a specified value by using the specified comparer.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="value"></param>
      <param name="comparer"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Count``1(System.IObservable{``0})">
      <summary> Returns the number of elements in an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Create``1(System.Func{System.IObserver{``0},System.Action})">
      <summary>Creates an observable sequence from the subscribe implementation.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="subscribe"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.CreateWithDisposable``1(System.Func{System.IObserver{``0},System.IDisposable})">
      <summary>  Creates an observable sequence from the subscribe implementation.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="subscribe"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Defer``1(System.Func{System.IObservable{``0}})">
      <summary>Returns an observable sequence that invokes the observableFactory function whenever a new observer subscribes.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="observableFactory"></param>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset)">
      <summary>  Time shifts the observable sequence by the specified time span. The relative time intervals between the values are preserved.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="dueTime"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset,Microsoft.Phone.Reactive.IScheduler)">
      <summary>  Time shifts the observable sequence by the specified time span. The relative time intervals between the values are preserved.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="dueTime"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Delay``1(System.IObservable{``0},System.TimeSpan)">
      <summary>  Time shifts the observable sequence by the specified time span. The relative time intervals between the values are preserved.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="dueTime"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Delay``1(System.IObservable{``0},System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
      <summary>  Time shifts the observable sequence by the specified time span. The relative time intervals between the values are preserved.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="dueTime"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Dematerialize``1(System.IObservable{Microsoft.Phone.Reactive.Notification{``0}})">
      <summary>  Dematerializes the explicit notification values of an observable sequence as implicit notifications.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.DistinctUntilChanged``1(System.IObservable{``0})">
      <summary>Returns an observable sequence that contains only distinct contiguous values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.DistinctUntilChanged``1(System.IObservable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Returns an observable sequence that contains only distinct contiguous values according to the comparer.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="comparer"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.DistinctUntilChanged``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>Returns an observable sequence that contains only distinct contiguous values according to the keySelector.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="keySelector"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TKey"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.DistinctUntilChanged``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Returns an observable sequence that contains only distinct contiguous values according to the keySelector and comparer.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="keySelector"></param>
      <param name="comparer"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TKey"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Do``1(System.IObservable{``0},System.Action{``0})">
      <summary>Invokes the action for its side-effects on each value in the observable sequence</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="onNext"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action)">
      <summary>   Invokes the action for its side-effects on each value in the observable sequence. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="onNext"></param>
      <param name="onCompleted"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
      <summary>   Invokes the action for its side-effects on each value in the observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="onNext"></param>
      <param name="onError"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
      <summary>   Invokes the action for its side-effects on each value in the observable sequence. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="onNext"></param>
      <param name="onError"></param>
      <param name="onCompleted"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Do``1(System.IObservable{``0},System.IObserver{``0})">
      <summary>   Invokes the action for its side-effects on each value in the observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="observer"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.DoWhile``1(System.Func{System.Boolean},System.IObservable{``0})">
      <summary>Repeats source as long as condition holds.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="condition"></param>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Empty``1">
      <summary>Returns an empty observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Empty``1(Microsoft.Phone.Reactive.IScheduler)">
      <summary> Returns an empty observable sequence. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="scheduler"></param>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Finally``1(System.IObservable{``0},System.Action)">
      <summary> Invokes finallyAction after source observable sequence terminates normally or by an exception.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="finallyAction"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.First``1(System.IObservable{``0})">
      <summary> Returns the first value of an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.FirstOrDefault``1(System.IObservable{``0})">
      <summary> Returns the first value of an observable sequence, or a default value if no value is found. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.For``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IObservable{``1}})">
      <summary>Concatenates the observable sequences obtained by running the specified result selector for each element in source.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="resultSelector"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ForkJoin``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>Runs all observable sequences in parallel and combines their last values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="sources"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ForkJoin``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
      <summary> Runs all observable sequences in parallel and combines their last values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="leftSource"></param>
      <param name="rightSource"></param>
      <param name="selector"></param>
      <typeparam name="TLeft"></typeparam>
      <typeparam name="TRight"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ForkJoin``1(System.IObservable{``0}[])">
      <summary> Runs all observable sequences in parallel and combines their first values. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="sources"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.FromAsyncPattern(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary> Converts a Begin/End invoke function pair into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`1" />
.</returns>
      <param name="begin"></param>
      <param name="end"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.FromAsyncPattern``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0})">
      <summary> Converts a Begin/End invoke function pair into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`1" />
.</returns>
      <param name="begin"></param>
      <param name="end"></param>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.FromAsyncPattern``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary> Converts a Begin/End invoke function pair into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`2" />
.</returns>
      <param name="begin"></param>
      <param name="end"></param>
      <typeparam name="T1"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.FromAsyncPattern``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1})">
      <summary> Converts a Begin/End invoke function pair into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`2" />
.</returns>
      <param name="begin"></param>
      <param name="end"></param>
      <typeparam name="T1"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.FromAsyncPattern``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary> Converts a Begin/End invoke function pair into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`3" />
.</returns>
      <param name="begin"></param>
      <param name="end"></param>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.FromAsyncPattern``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2})">
      <summary> Converts a Begin/End invoke function pair into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`3" />
.</returns>
      <param name="begin"></param>
      <param name="end"></param>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.FromEvent``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}})">
      <summary> Returns an observable sequence that contains the values of the underlying .NET event.
</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="addHandler"></param>
      <param name="removeHandler"></param>
      <typeparam name="TEventArgs"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.FromEvent``2(System.Func{System.EventHandler{``1},``0},System.Action{``0},System.Action{``0})">
      <summary> Returns an observable sequence that contains the values of the underlying .NET event.
</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="conversion"></param>
      <param name="addHandler"></param>
      <param name="removeHandler"></param>
      <typeparam name="TDelegate"></typeparam>
      <typeparam name="TEventArgs"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.FromEvent``1(System.Object,System.String)">
      <summary> Returns an observable sequence that contains the values of the underlying .NET event.
</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="target"></param>
      <param name="eventName"></param>
      <typeparam name="TEventArgs"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,``0})">
      <summary> Generates an observable sequence by iterating a state from an initial state until the condition fails.  </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="initialState"></param>
      <param name="condition"></param>
      <param name="resultSelector"></param>
      <param name="iterate"></param>
      <typeparam name="TState"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,``0},Microsoft.Phone.Reactive.IScheduler)">
      <summary> Generates an observable sequence by iterating a state from an initial state until the condition fails.  </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="initialState"></param>
      <param name="condition"></param>
      <param name="resultSelector"></param>
      <param name="iterate"></param>
      <param name="scheduler"></param>
      <typeparam name="TState"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.GenerateWithTime``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,System.DateTimeOffset},System.Func{``0,``0})">
      <summary>Generates an observable sequence by iterating a state from an initial state until the condition fails.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="initialState"></param>
      <param name="condition"></param>
      <param name="resultSelector"></param>
      <param name="timeSelector"></param>
      <param name="iterate"></param>
      <typeparam name="TState"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.GenerateWithTime``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,System.DateTimeOffset},System.Func{``0,``0},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Generates an observable sequence by iterating a state from an initial state until the condition fails.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="initialState"></param>
      <param name="condition"></param>
      <param name="resultSelector"></param>
      <param name="timeSelector"></param>
      <param name="iterate"></param>
      <param name="scheduler"></param>
      <typeparam name="TState"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.GenerateWithTime``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,System.TimeSpan},System.Func{``0,``0})">
      <summary>Generates an observable sequence by iterating a state from an initial state until the condition fails.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="initialState"></param>
      <param name="condition"></param>
      <param name="resultSelector"></param>
      <param name="timeSelector"></param>
      <param name="iterate"></param>
      <typeparam name="TState"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.GenerateWithTime``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,System.TimeSpan},System.Func{``0,``0},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Generates an observable sequence by iterating a state from an initial state until the condition fails.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="initialState"></param>
      <param name="condition"></param>
      <param name="resultSelector"></param>
      <param name="timeSelector"></param>
      <param name="iterate"></param>
      <param name="scheduler"></param>
      <typeparam name="TState"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.GetEnumerator``1(System.IObservable{``0})">
      <summary> Returns an enumerator that enumerates all values of the observable sequence.</summary>
      <returns>Returns IEnumerator.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.GroupBy``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>  Groups the elements of an observable sequence according to a specified key selector function. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="keySelector"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TKey"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.GroupBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of an observable sequence according to a specified key selector function and comparer.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="keySelector"></param>
      <param name="comparer"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TKey"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.GroupBy``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>  Groups the elements of an observable sequence and selects the resulting elements by using a specified function.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="keySelector"></param>
      <param name="elementSelector"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TElement"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.GroupBy``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="keySelector"></param>
      <param name="elementSelector"></param>
      <param name="comparer"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TElement"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.If``1(System.Func{System.Boolean},System.IObservable{``0},System.IObservable{``0})">
      <summary> Determines if an observable collection contains values.  </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="condition"></param>
      <param name="thenSource"></param>
      <param name="elseSource"></param>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Interval(System.TimeSpan)">
      <summary> Returns an observable sequence that produces a value after each period.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="period"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Interval(System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
      <summary> Returns an observable sequence that produces a value after each period.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="period"></param>
      <param name="scheduler"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.IsEmpty``1(System.IObservable{``0})">
      <summary> Determines if an observable collection is empty. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Join``1(Microsoft.Phone.Reactive.Plan{``0}[])">
      <summary> Joins together the results from several patterns. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="plans"></param>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Join``1(System.Collections.Generic.IEnumerable{Microsoft.Phone.Reactive.Plan{``0}})">
      <summary>Joins together the results from several patterns.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="plans"></param>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Last``1(System.IObservable{``0})">
      <summary> Returns the last value of an observable sequence. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.LastOrDefault``1(System.IObservable{``0})">
      <summary> Returns the last value of an observable sequence, or a default value if no value is found. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Latest``1(System.IObservable{``0})">
      <summary> Samples the most recent value (buffer of size one with consumption) in an observable sequence. </summary>
      <returns>Returns IEnumerable.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Let``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
      <summary>Bind the source to the parameter without sharing subscription side-effects. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="function"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Let``2(``0,System.Func{``0,System.IObservable{``1}})">
      <summary> Bind the source to the parameter without sharing subscription side-effects. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="value"></param>
      <param name="selector"></param>
      <typeparam name="TValue"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.LongCount``1(System.IObservable{``0})">
      <summary> Returns an Int64 that represents the total number of values in an observable sequence. Returns an Int64 that represents the total number of values in an observable sequence. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Materialize``1(System.IObservable{``0})">
      <summary> Materializes the implicit notifications of an observable sequence as explicit notification values. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max(System.IObservable{System.Decimal})">
      <summary>Returns the maximum value in an observable sequence of System.Decimal.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max(System.IObservable{System.Double})">
      <summary>Returns the maximum value in an observable sequence of System.Double values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max(System.IObservable{System.Int32})">
      <summary>Returns the maximum value in an observable sequence of System.Int32 values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max(System.IObservable{System.Int64})">
      <summary>  Returns the maximum value in an observable sequence of System.Int64 values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max(System.IObservable{System.Nullable{System.Decimal}})">
      <summary>  Returns the maximum value in an observable sequence of nullable System.Decimal values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max(System.IObservable{System.Nullable{System.Double}})">
      <summary>  Returns the maximum value in an observable sequence of nullable System.Double values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max(System.IObservable{System.Nullable{System.Int32}})">
      <summary>  Returns the maximum value in an observable sequence of nullable System.Int32 values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max(System.IObservable{System.Nullable{System.Int64}})">
      <summary>  Returns the maximum value in an observable sequence of nullable System.Int64 values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max(System.IObservable{System.Nullable{System.Single}})">
      <summary>  Returns the maximum value in an observable sequence of System.Float values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max(System.IObservable{System.Single})">
      <summary>  Returns the maximum value in an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max``1(System.IObservable{``0})">
      <summary>  Returns the maximum value in an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Max``1(System.IObservable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>  Returns the maximum value in an observable sequence as determined by the specified comparer function.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="comparer"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.MaxBy``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>Returns the element in an observable sequence with the maximum key value.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="keySelector"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TKey"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.MaxBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Returns the element in an observable sequence with the maximum key value.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="keySelector"></param>
      <param name="comparer"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TKey"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Merge``1(Microsoft.Phone.Reactive.IScheduler,System.IObservable{``0}[])">
      <summary> Merges an observable sequence of observable sequences into an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="scheduler"></param>
      <param name="sources"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>Merges an observable sequence of observable sequences into an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="sources"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Merges an observable sequence of observable sequences into an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="sources"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Merge``1(System.IObservable{System.IObservable{``0}})">
      <summary> Merges an observable sequence of observable sequences into an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Merge``1(System.IObservable{``0},System.IObservable{``0})">
      <summary> Merges an observable sequence of observable sequences into an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="leftSource"></param>
      <param name="rightSource"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Merge``1(System.IObservable{``0},System.IObservable{``0},Microsoft.Phone.Reactive.IScheduler)">
      <summary> Merges an observable sequence of observable sequences into an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="leftSource"></param>
      <param name="rightSource"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Merge``1(System.IObservable{``0}[])">
      <summary>Merges an observable sequence of observable sequences into an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="sources"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min(System.IObservable{System.Decimal})">
      <summary>  Returns the minimum value in an observable sequence of System.Decimal values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min(System.IObservable{System.Double})">
      <summary>  Returns the minimum value in an observable sequence of System.Double values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min(System.IObservable{System.Int32})">
      <summary>  Returns the minimum value in an observable sequence of System.Int32 values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min(System.IObservable{System.Int64})">
      <summary>  Returns the minimum value in an observable sequence of System.Int64 values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min(System.IObservable{System.Nullable{System.Decimal}})">
      <summary>  Returns the minimum value in an observable sequence of nullable System.Decimal values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min(System.IObservable{System.Nullable{System.Double}})">
      <summary>  Returns the minimum value in an observable sequence of nullable System.Double values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min(System.IObservable{System.Nullable{System.Int32}})">
      <summary>  Returns the minimum value in an observable sequence of Nullable System.Int32 values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min(System.IObservable{System.Nullable{System.Int64}})">
      <summary>  Returns the minimum value in an observable sequence of nullable System.Int64 values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min(System.IObservable{System.Nullable{System.Single}})">
      <summary>  Returns the minimum value in an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min(System.IObservable{System.Single})">
      <summary>  Returns the minimum value in an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min``1(System.IObservable{``0})">
      <summary>  Returns the minimum value in an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Min``1(System.IObservable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>  Returns the minimum value in an observable sequence as determined by the specified comparer function.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="comparer"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.MinBy``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>Returns the element in an observable sequence with the minimum key value.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="keySelector"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TKey"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.MinBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Returns the element in an observable sequence with the minimum key value.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="keySelector"></param>
      <param name="comparer"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TKey"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.MostRecent``1(System.IObservable{``0},``0)">
      <summary> Samples the most recent value (buffer of size one without consumption) in an observable sequence.</summary>
      <returns>Returns IEnumerable.</returns>
      <param name="source"></param>
      <param name="initialValue"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Never``1">
      <summary> Returns a non-terminating observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Next``1(System.IObservable{``0})">
      <summary> Samples the next value (blocking without buffering) from an observable sequence.</summary>
      <returns>Returns IEnumerable.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ObserveOn``1(System.IObservable{``0},Microsoft.Phone.Reactive.DispatcherScheduler)">
      <summary> Asynchronously notify observers using the scheduler.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ObserveOn``1(System.IObservable{``0},Microsoft.Phone.Reactive.IScheduler)">
      <summary> Asynchronously notify observers using the scheduler.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ObserveOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
      <summary> Asynchronously notify observers on the synchronization context.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="synchronizationContext"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ObserveOnDispatcher``1(System.IObservable{``0})">
      <summary> Asynchronously notify observers using the current dispatcher. </summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.OfType``1(System.IObservable{System.Object})">
      <summary> Filters values of the given type.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.OnErrorResumeNext``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="sources"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.OnErrorResumeNext``1(System.IObservable{``0},System.IObservable{``0})">
      <summary>Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="first"></param>
      <param name="second"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.OnErrorResumeNext``1(System.IObservable{``0}[])">
      <summary>Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="sources"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Prune``1(System.IObservable{``0})">
      <summary>Returns a connectable observable sequence that shares a single subscription to the underlying source containing only the last notification.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Prune``1(System.IObservable{``0},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns a connectable observable sequence that shares a single subscription to the underlying source containing only the last notification.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Prune``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
      <summary>Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source containing only the last notification.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="selector"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Prune``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source containing only the last notification.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="selector"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Publish``1(System.IObservable{``0})">
      <summary>Returns a connectable observable sequence that shares a single subscription to the underlying source</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Publish``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
      <summary>Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="selector"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Publish``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},``0)">
      <summary>Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source and starts with initialValue.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="selector"></param>
      <param name="initialValue"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Publish``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},``0,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source and starts with initialValue.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="selector"></param>
      <param name="initialValue"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Publish``1(System.IObservable{``0},``0)">
      <summary>Returns a connectable observable sequence that shares a single subscription to the underlying source and starts with initialValue.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="initialValue"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Publish``1(System.IObservable{``0},``0,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns a connectable observable sequence that shares a single subscription to the underlying source and starts with initialValue. 
</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="initialValue"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Range(System.Int32,System.Int32)">
      <summary>Generates an observable sequence of integral numbers within a specified range.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="start"></param>
      <param name="count"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Range(System.Int32,System.Int32,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Generates an observable sequence of integral numbers within a specified range.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="start"></param>
      <param name="count"></param>
      <param name="scheduler"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.RefCount``1(Microsoft.Phone.Reactive.IConnectableObservable{``0})">
      <summary>Returns an observable sequence that stays connected to the source as long as there is at least one subscription to the observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.RemoveTimeInterval``1(System.IObservable{Microsoft.Phone.Reactive.TimeInterval{``0}})">
      <summary>Removes the timestamp from each value of an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.RemoveTimestamp``1(System.IObservable{Microsoft.Phone.Reactive.Timestamped{``0}})">
      <summary>Removes the timestamp from each value of an observable sequence.
</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Repeat``1(System.IObservable{``0})">
      <summary>Repeats the observable sequence indefinitely.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Repeat``1(System.IObservable{``0},System.Int32)">
      <summary>Repeats the observable sequence the specified number of times</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="repeatCount"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Repeat``1(``0)">
      <summary>Generates an observable sequence that contains one repeated value.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="value"></param>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Repeat``1(``0,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Generates an observable sequence that contains one repeated value.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="value"></param>
      <param name="scheduler"></param>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Repeat``1(``0,System.Int32)">
      <summary>Generates an observable sequence that contains one repeated value.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="value"></param>
      <param name="repeatCount"></param>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Repeat``1(``0,System.Int32,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Generates an observable sequence that contains one repeated value.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="value"></param>
      <param name="repeatCount"></param>
      <param name="scheduler"></param>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``1(System.IObservable{``0})">
      <summary>Returns a connectable observable sequence that shares a single subscription to the underlying source replaying all notifications.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``1(System.IObservable{``0},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns a connectable observable sequence that shares a single subscription to the underlying source replaying all notifications.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
      <summary>Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source replaying all notifications. 
</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="selector"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source replaying all notifications.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="selector"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32)">
      <summary>Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source replaying bufferSize notifications.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="selector"></param>
      <param name="bufferSize"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source replaying bufferSize notifications.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="selector"></param>
      <param name="bufferSize"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,System.TimeSpan)">
      <summary>Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source replaying bufferSize notifications within window. 
</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="selector"></param>
      <param name="bufferSize"></param>
      <param name="window"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source replaying bufferSize notifications within window. 
</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="selector"></param>
      <param name="bufferSize"></param>
      <param name="window"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.TimeSpan)">
      <summary>Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source replaying all notifications within window.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="selector"></param>
      <param name="window"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source replaying all notifications within window.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="selector"></param>
      <param name="window"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``1(System.IObservable{``0},System.Int32)">
      <summary>Returns a connectable observable sequence that shares a single subscription to the underlying source replaying bufferSize notifications. 
</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="bufferSize"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``1(System.IObservable{``0},System.Int32,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns a connectable observable sequence that shares a single subscription to the underlying source replaying bufferSize notifications within window.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="bufferSize"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``1(System.IObservable{``0},System.Int32,System.TimeSpan)">
      <summary>Returns a connectable observable sequence that shares a single subscription to the underlying source replaying bufferSize notifications within window.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="bufferSize"></param>
      <param name="window"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``1(System.IObservable{``0},System.Int32,System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns a connectable observable sequence that shares a single subscription to the underlying source replaying bufferSize notifications within window. 
</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="bufferSize"></param>
      <param name="window"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``1(System.IObservable{``0},System.TimeSpan)">
      <summary>Returns a connectable observable sequence that shares a single subscription to the underlying source replaying all notifications within window. 
</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="window"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Replay``1(System.IObservable{``0},System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns a connectable observable sequence that shares a single subscription to the underlying source replaying all notifications within window. 
</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.IConnectableObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="window"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Retry``1(System.IObservable{``0})">
      <summary>Repeats the source observable sequence until it successfully terminates. 
</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Retry``1(System.IObservable{``0},System.Int32)">
      <summary>Repeats the source observable sequence the retryCount times or until it successfully terminates.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="retryCount"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Return``1(``0)">
      <summary>Returns an observable sequence that contains a single value.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="value"></param>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Return``1(``0,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns an observable sequence that contains a single value.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="value"></param>
      <param name="scheduler"></param>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Run``1(System.IObservable{``0})">
      <summary>Invokes the observable sequence for its side-effects and blocks till the sequence is terminated.</summary>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Run``1(System.IObservable{``0},System.Action{``0})">
      <summary>Invokes the action for its side-effects on each value in the observable sequence and blocks till the sequence is terminated.</summary>
      <param name="source"></param>
      <param name="onNext"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Run``1(System.IObservable{``0},System.Action{``0},System.Action)">
      <summary>Invokes the action for its side-effects on each value in the observable sequence and blocks till the sequence is terminated.</summary>
      <param name="source"></param>
      <param name="onNext"></param>
      <param name="onCompleted"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Run``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
      <summary>Invokes the action for its side-effects on each value in the observable sequence and blocks till the sequence is terminated.</summary>
      <param name="source"></param>
      <param name="onNext"></param>
      <param name="onError"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Run``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
      <summary>Invokes the action for its side-effects on each value in the observable sequence and blocks till the sequence is terminated.</summary>
      <param name="source"></param>
      <param name="onNext"></param>
      <param name="onError"></param>
      <param name="onCompleted"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Run``1(System.IObservable{``0},System.IObserver{``0})">
      <summary>Invokes the action for its side-effects on each value in the observable sequence and blocks till the sequence is terminated.</summary>
      <param name="source"></param>
      <param name="observer"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sample``1(System.IObservable{``0},System.TimeSpan)">
      <summary>Samples the observable sequence at each interval.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="interval"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sample``1(System.IObservable{``0},System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Samples the observable sequence at each interval.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="interval"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Scan``1(System.IObservable{``0},System.Func{``0,``0,``0})">
      <summary>Applies an accumulator function over an observable sequence and returns each intermediate result.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="accumulator"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Scan``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})">
      <summary>Applies an accumulator function over an observable sequence and returns each intermediate result. The specified seed value is used as the initial accumulator value.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="seed"></param>
      <param name="accumulator"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TAccumulate"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Scan0``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})">
      <summary>Applies an accumulator function over an observable sequence and returns each intermediate result. The specified seed value is prepended to the sequence once a message comes in.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="seed"></param>
      <param name="accumulator"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TAccumulate"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Select``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>Projects each value of an observable sequence into a new form.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="selector"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Select``2(System.IObservable{``0},System.Func{``0,System.Int32,``1})">
      <summary>Projects each value of an observable sequence into a new form by incorporating the element's index. 
</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="selector"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projects each value of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="selector"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.IObservable{``1}},System.Func{``0,``1,``2})">
      <summary>Projects each value of an observable sequence to an observable sequence, flattens the resulting observable sequences into one observable sequence, and invokes a result selector function on each value therein.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="collectionSelector"></param>
      <param name="resultSelector"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TCollection"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}})">
      <summary>Projects each value of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="selector"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}},System.Func{System.Exception,System.IObservable{``1}},System.Func{System.IObservable{``1}})">
      <summary>Projects each value of an observable sequence to an observable sequence, flattens the resulting observable sequences into one observable sequence, and invokes a result selector function on each value therein.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="onNext"></param>
      <param name="onError"></param>
      <param name="onCompleted"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SelectMany``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>Projects each value of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="other"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TOther"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Single``1(System.IObservable{``0})">
      <summary>Returns the only value of an observable sequence, and throws an exception if there is not exactly one value in the observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SingleOrDefault``1(System.IObservable{``0})">
      <summary>Returns the only value of an observable sequence, or a default value if the observable sequence is empty; this method throws an exception if there is more than one value in the observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Skip``1(System.IObservable{``0},System.Int32)">
      <summary>Bypasses a specified number of values in an observable sequence and then returns the remaining values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="count"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SkipLast``1(System.IObservable{``0},System.Int32)">
      <summary>Bypasses a specified number of values at the end of an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="count"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SkipUntil``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>Returns the values from the source observable sequence only after the other observable sequence produces a value.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="other"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TOther"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SkipWhile``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>Bypasses values in an observable sequence as long as a specified condition is true and then returns the remaining values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="predicate"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Start(System.Action)">
      <summary>Invokes the action asynchronously.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="action"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Start(System.Action,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Invokes the action asynchronously.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="action"></param>
      <param name="scheduler"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Start``1(System.Func{``0})">
      <summary>Invokes the function asynchronously.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="function"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Start``1(System.Func{``0},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Invokes the function asynchronously.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="function"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.StartWith``1(System.IObservable{``0},Microsoft.Phone.Reactive.IScheduler,``0[])">
      <summary>Prepends a sequence values to an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="scheduler"></param>
      <param name="values"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.StartWith``1(System.IObservable{``0},``0[])">
      <summary>Prepends a sequence values to an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="values"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Subscribe``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0})">
      <summary>Subscribes an observer to an enumerable sequence. Returns an object that can be used to unsubscribe the observer from the enumerable.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="source"></param>
      <param name="observer"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Subscribe``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Subscribes an observer to an enumerable sequence. Returns an object that can be used to unsubscribe the observer from the enumerable.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="source"></param>
      <param name="observer"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SubscribeOn``1(System.IObservable{``0},Microsoft.Phone.Reactive.DispatcherScheduler)">
      <summary>Asynchronously subscribes and unsubscribes observers using the scheduler.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SubscribeOn``1(System.IObservable{``0},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Asynchronously subscribes and unsubscribes observers using the scheduler.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SubscribeOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
      <summary>Asynchronously subscribes and unsubscribes observers on the synchronization context.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="context"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.SubscribeOnDispatcher``1(System.IObservable{``0})">
      <summary>Asynchronously subscribes and unsubscribes observers using the current dispatcher.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sum(System.IObservable{System.Decimal})">
      <summary>Computes the sum of a sequence of System.Decimal values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sum(System.IObservable{System.Double})">
      <summary>Computes the sum of a sequence of System.Double values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sum(System.IObservable{System.Int32})">
      <summary>Computes the sum of a sequence of System.Int32 values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sum(System.IObservable{System.Int64})">
      <summary>Computes the sum of a sequence of System.Int64 values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sum(System.IObservable{System.Nullable{System.Decimal}})">
      <summary>Computes the sum of a sequence of nullable System.Decimal values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sum(System.IObservable{System.Nullable{System.Double}})">
      <summary>Computes the sum of a sequence of nullable System.Double values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sum(System.IObservable{System.Nullable{System.Int32}})">
      <summary>Computes the sum of a sequence of nullable System.Int32 values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sum(System.IObservable{System.Nullable{System.Int64}})">
      <summary>Computes the sum of a sequence of nullable System.Int64 values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sum(System.IObservable{System.Nullable{System.Single}})">
      <summary>Computes the sum of a sequence of nullable System.Float values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Sum(System.IObservable{System.Single})">
      <summary>Computes the sum of a sequence of System.Float values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Switch``1(System.IObservable{System.IObservable{``0}})">
      <summary>Transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Synchronize``1(System.IObservable{``0})">
      <summary>Synchronizes the observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Synchronize``1(System.IObservable{``0},System.Object)">
      <summary>Synchronizes the observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="gate"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Take``1(System.IObservable{``0},System.Int32)">
      <summary>Returns a specified number of contiguous values from the start of an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="count"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Take``1(System.IObservable{``0},System.Int32,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns a specified number of contiguous values from the start of an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="count"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.TakeLast``1(System.IObservable{``0},System.Int32)">
      <summary>Returns a specified number of contiguous values from the end of an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="count"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.TakeUntil``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>Returns the values from the source observable sequence until the other observable sequence produces a value.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="other"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TOther"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.TakeWhile``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns values from an observable sequence as long as a specified condition is true, and then skips the remaining values.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="predicate"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Then``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>Matches when the observable sequence has an available value and projects the value.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.Plan`1" />
.</returns>
      <param name="source"></param>
      <param name="selector"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Throttle``1(System.IObservable{``0},System.TimeSpan)">
      <summary>Ignores values from an observable sequence which are followed by another value before the specified time span.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="dueTime"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Throttle``1(System.IObservable{``0},System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Ignores values from an observable sequence which are followed by another value before the specified time span.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="dueTime"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Throw``1(System.Exception)">
      <summary>Returns an observable sequence that terminates with an exception.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="exception"></param>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Throw``1(System.Exception,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns an observable sequence that terminates with an exception.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="exception"></param>
      <param name="scheduler"></param>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.TimeInterval``1(System.IObservable{``0})">
      <summary>Records the time interval for each value of an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.TimeInterval``1(System.IObservable{``0},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Records the time interval for each value of an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset)">
      <summary>Returns either the observable sequence or an TimeoutException if dueTime elapses.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="dueTime"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns either the observable sequence or an TimeoutException if dueTime elapses.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="dueTime"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.IObservable{``0})">
      <summary>Returns the source observable sequence or the other observable sequence if dueTime elapses.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="dueTime"></param>
      <param name="other"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.IObservable{``0},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns the source observable sequence or the other observable sequence if dueTime elapses.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="dueTime"></param>
      <param name="other"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan)">
      <summary>Returns either the observable sequence or an TimeoutException if dueTime elapses.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="dueTime"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns either the observable sequence or an TimeoutException if dueTime elapses.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="dueTime"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.IObservable{``0})">
      <summary>Returns the source observable sequence or the other observable sequence if dueTime elapses.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="dueTime"></param>
      <param name="other"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.IObservable{``0},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns the source observable sequence or the other observable sequence if dueTime elapses.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="dueTime"></param>
      <param name="other"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timer(System.DateTimeOffset)">
      <summary>Returns an observable sequence that produces a value at dueTime.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="dueTime"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timer(System.DateTimeOffset,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns an observable sequence that produces a value after the dueTime has elapsed.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="dueTime"></param>
      <param name="scheduler"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timer(System.DateTimeOffset,System.TimeSpan)">
      <summary>Returns an observable sequence that produces a value at dueTime and then after each period.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="dueTime"></param>
      <param name="period"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timer(System.DateTimeOffset,System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns an observable sequence that produces a value at dueTime and then after each period.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="dueTime"></param>
      <param name="period"></param>
      <param name="scheduler"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timer(System.TimeSpan)">
      <summary>Returns an observable sequence that produces a value after the dueTime has elapsed.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="dueTime"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timer(System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns an observable sequence that produces a value after the dueTime has elapsed.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="dueTime"></param>
      <param name="scheduler"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timer(System.TimeSpan,System.TimeSpan)">
      <summary>Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="dueTime"></param>
      <param name="period"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timer(System.TimeSpan,System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="dueTime"></param>
      <param name="period"></param>
      <param name="scheduler"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timestamp``1(System.IObservable{``0})">
      <summary>Records the timestamp for each value of an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Timestamp``1(System.IObservable{``0},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Records the timestamp for each value of an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync(System.Action)">
      <summary>Converts the action into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`1" />
.</returns>
      <param name="action"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync(System.Action,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Converts the action into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`1" />
.</returns>
      <param name="action"></param>
      <param name="scheduler"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``1(System.Action{``0})">
      <summary>Converts the action into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`2" />
.</returns>
      <param name="action"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``1(System.Action{``0},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Converts the action into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`2" />
.</returns>
      <param name="action"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``2(System.Action{``0,``1})">
      <summary>Converts the action into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`3" />
.</returns>
      <param name="action"></param>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``2(System.Action{``0,``1},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Converts the action into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`3" />
.</returns>
      <param name="action"></param>
      <param name="scheduler"></param>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``3(System.Action{``0,``1,``2})">
      <summary>Converts the action into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`4" />
.</returns>
      <param name="action"></param>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``3(System.Action{``0,``1,``2},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Converts the action into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`4" />
.</returns>
      <param name="action"></param>
      <param name="scheduler"></param>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``4(System.Action{``0,``1,``2,``3})">
      <summary>Converts the action into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`5" />
.</returns>
      <param name="action"></param>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
      <typeparam name="T4"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``4(System.Action{``0,``1,``2,``3},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Converts the action into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`5" />
.</returns>
      <param name="action"></param>
      <param name="scheduler"></param>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
      <typeparam name="T4"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``1(System.Func{``0})">
      <summary>Converts the function into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`1" />
.</returns>
      <param name="function"></param>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``1(System.Func{``0},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Converts the function into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`1" />
.</returns>
      <param name="function"></param>
      <param name="scheduler"></param>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``2(System.Func{``0,``1})">
      <summary>Converts the function into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`2" />
.</returns>
      <param name="function"></param>
      <typeparam name="T"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``2(System.Func{``0,``1},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Converts the function into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`2" />
.</returns>
      <param name="function"></param>
      <param name="scheduler"></param>
      <typeparam name="T"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``3(System.Func{``0,``1,``2})">
      <summary>Converts the function into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`3" />
.</returns>
      <param name="function"></param>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``3(System.Func{``0,``1,``2},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Converts the function into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`3" />
.</returns>
      <param name="function"></param>
      <param name="scheduler"></param>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``4(System.Func{``0,``1,``2,``3})">
      <summary>Converts the function into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`4" />
.</returns>
      <param name="function"></param>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``4(System.Func{``0,``1,``2,``3},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Converts the function into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`4" />
.</returns>
      <param name="function"></param>
      <param name="scheduler"></param>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``5(System.Func{``0,``1,``2,``3,``4})">
      <summary>Converts the function into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`5" />
.</returns>
      <param name="function"></param>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
      <typeparam name="T4"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToAsync``5(System.Func{``0,``1,``2,``3,``4},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Converts the function into an asynchronous function.</summary>
      <returns>Returns 
<see cref="T:System.Func`5" />
.</returns>
      <param name="function"></param>
      <param name="scheduler"></param>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
      <typeparam name="T4"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToEnumerable``1(System.IObservable{``0})">
      <summary>Converts an observable sequence to an enumerable sequence.</summary>
      <returns>Returns IEnumerable.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Converts an enumerable sequence to an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0},Microsoft.Phone.Reactive.IScheduler)">
      <summary>Converts an enumerable sequence to an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="scheduler"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Using``2(System.Func{``1},System.Func{``1,System.IObservable{``0}})">
      <summary>Retrieves resource from resourceSelector for use in resourceUsage and disposes the resource once the resulting observable sequence terminates.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="resourceSelector"></param>
      <param name="resourceUsage"></param>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TResource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Where``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>Filters the values of an observable sequence based on a predicate.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="predicate"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Where``1(System.IObservable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Filters the values of an observable sequence based on a predicate by incorporating the element's index.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="source"></param>
      <param name="predicate"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.While``1(System.Func{System.Boolean},System.IObservable{``0})">
      <summary>Repeats source as long as condition holds.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="condition"></param>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Zip``3(System.IObservable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>Merges an observable sequence and an enumerable sequence into one observable sequence by using the selector function.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="leftSource"></param>
      <param name="rightSource"></param>
      <param name="selector"></param>
      <typeparam name="TLeft"></typeparam>
      <typeparam name="TRight"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observable.Zip``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
      <summary>Merges two observable sequences into one observable sequence by using the selector function.</summary>
      <returns>Returns 
<see cref="T:System.IObservable`1" />
.</returns>
      <param name="leftSource"></param>
      <param name="rightSource"></param>
      <param name="selector"></param>
      <typeparam name="TLeft"></typeparam>
      <typeparam name="TRight"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.ObservableExtensions">
      <summary>Provides a set of static methods for subscribing delegates to observables.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ObservableExtensions.Subscribe``1(System.IObservable{``0})">
      <summary>Evaluates the observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="source"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0})">
      <summary>Subscribes a value handler to an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="source"></param>
      <param name="onNext"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action)">
      <summary>Subscribes a value handler and a completion handler to an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="source"></param>
      <param name="onNext"></param>
      <param name="onCompleted"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
      <summary>Subscribes a value handler and an exception handler to an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="source"></param>
      <param name="onNext"></param>
      <param name="onError"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
      <summary>Subscribes a value handler, an exception handler, and a completion handler to an observable sequence.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="source"></param>
      <param name="onNext"></param>
      <param name="onError"></param>
      <param name="onCompleted"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Observer">
      <summary>Provides a set of static methods for creating observers.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observer.AsObserver``1(System.IObserver{``0})">
      <summary>Hides the identity of an observer.</summary>
      <returns>Returns 
<see cref="T:System.IObserver`1" />
.</returns>
      <param name="observer"></param>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observer.Create``1(System.Action{``0})">
      <summary>Creates an observer from the specified OnNext action.
</summary>
      <returns>Returns 
<see cref="T:System.IObserver`1" />
.</returns>
      <param name="onNext"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observer.Create``1(System.Action{``0},System.Action)">
      <summary>Creates an observer from the specified OnNext and OnCompleted actions.</summary>
      <returns>Returns 
<see cref="T:System.IObserver`1" />
.</returns>
      <param name="onNext"></param>
      <param name="onCompleted"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observer.Create``1(System.Action{``0},System.Action{System.Exception})">
      <summary>Creates an observer from the specified OnNext and OnError actions.</summary>
      <returns>Returns 
<see cref="T:System.IObserver`1" />
.</returns>
      <param name="onNext"></param>
      <param name="onError"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observer.Create``1(System.Action{``0},System.Action{System.Exception},System.Action)">
      <summary>Creates an observer from the specified OnNext, OnError, and OnCompleted actions.</summary>
      <returns>Returns 
<see cref="T:System.IObserver`1" />
.</returns>
      <param name="onNext"></param>
      <param name="onError"></param>
      <param name="onCompleted"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observer.ToNotifier``1(System.IObserver{``0})">
      <summary>Creates a notification callback from an observer.</summary>
      <returns>Returns 
<see cref="T:System.Action`1" />
.</returns>
      <param name="observer"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Observer.ToObserver``1(System.Action{Microsoft.Phone.Reactive.Notification{``0}})">
      <summary>Creates an observer from a notification callback.</summary>
      <returns>Returns 
<see cref="T:System.IObserver`1" />
.</returns>
      <param name="handler"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Pattern">
      <summary>Represents a join pattern.
</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Pattern`2">
      <summary>Represents a join pattern.</summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Pattern`2.And``1(System.IObservable{``0})">
      <summary>Matches when all observable sequences have an available value.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.Pattern`3" />
.</returns>
      <param name="other"></param>
      <typeparam name="T3"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Pattern`2.Then``1(System.Func{`0,`1,``0})">
      <summary>Matches when all observable sequences have an available value and projects the values.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.Plan`1" />
.</returns>
      <param name="selector"></param>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Pattern`3">
      <summary>Represents a join pattern.</summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Pattern`3.And``1(System.IObservable{``0})">
      <summary>Matches when all observable sequences have an available value.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.Pattern`4" />
.</returns>
      <param name="other"></param>
      <typeparam name="T4"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Pattern`3.Then``1(System.Func{`0,`1,`2,``0})">
      <summary>Matches when all observable sequences have an available value and projects the values.
</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.Plan`1" />
.</returns>
      <param name="selector"></param>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Pattern`4">
      <summary>Represents a join pattern.</summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
      <typeparam name="T4"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Pattern`4.Then``1(System.Func{`0,`1,`2,`3,``0})">
      <summary>Matches when all observable sequences have an available value and projects the values.
</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.Plan`1" />
.</returns>
      <param name="selector"></param>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Plan`1">
      <summary>Represents an execution plan for join patterns.
</summary>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="T:Microsoft.Phone.Reactive.RefCountDisposable">
      <summary>Represents a disposable that only disposes its underlying disposable when all dependent disposables have been disposed.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.RefCountDisposable.#ctor(System.IDisposable)">
      <summary>Creates a disposable that only disposes its underlying disposable when all dependent disposables have been disposed</summary>
      <param name="underlyingDisposable"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.RefCountDisposable.Dispose">
      <summary>Disposes the underlying disposable only when all dependent disposables have been disposed.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.RefCountDisposable.GetDisposable">
      <summary>Returns a disposable that when disposed decreases the refcount on the underlying disposable.
</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.ReplaySubject`1">
      <summary>Represents an object that is both an observable sequence as well as an observer.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.#ctor">
      <summary>Creates a replayable subject.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.#ctor(Microsoft.Phone.Reactive.IScheduler)">
      <summary>Creates a replayable subject.</summary>
      <param name="scheduler"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.#ctor(System.Int32)">
      <summary>Creates a replayable subject.</summary>
      <param name="bufferSize"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.#ctor(System.Int32,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Creates a replayable subject.</summary>
      <param name="bufferSize"></param>
      <param name="scheduler"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.#ctor(System.Int32,System.TimeSpan)">
      <summary>Creates a replayable subject.</summary>
      <param name="bufferSize"></param>
      <param name="window"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.#ctor(System.Int32,System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Creates a replayable subject.</summary>
      <param name="bufferSize"></param>
      <param name="window"></param>
      <param name="scheduler"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.#ctor(System.TimeSpan)">
      <summary>Creates a replayable subject.</summary>
      <param name="window"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.#ctor(System.TimeSpan,Microsoft.Phone.Reactive.IScheduler)">
      <summary>Creates a replayable subject.</summary>
      <param name="window"></param>
      <param name="scheduler"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.OnCompleted">
      <summary>Notifies all subscribed observers of the end of the sequence.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.OnError(System.Exception)">
      <summary>Notifies all subscribed observers with the exception.</summary>
      <param name="exception"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.OnNext(`0)">
      <summary>Notifies all subscribed observers with the value.</summary>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ReplaySubject`1.Subscribe(System.IObserver{`0})">
      <summary>Subscribes an observer to the subject.
</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="observer"></param>
    </member>
    <member name="T:Microsoft.Phone.Reactive.ScheduledDisposable">
      <summary>Represents an object that schedules units of work on a provided scheduler.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ScheduledDisposable.#ctor(Microsoft.Phone.Reactive.IScheduler,System.IDisposable)">
      <summary>Constructs a ScheduledDisposable that uses a scheduler on which to dipose the disposable.</summary>
      <param name="scheduler"></param>
      <param name="disposable"></param>
    </member>
    <member name="P:Microsoft.Phone.Reactive.ScheduledDisposable.Disposable">
      <summary>Gets a value indicating the underlying disposable.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ScheduledDisposable.Dispose">
      <summary>Disposes the wrapped disposable on the provided scheduler.</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.ScheduledDisposable.Scheduler">
      <summary>Gets a value indicating the scheduler.
</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.IScheduler" />
.</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Scheduler">
      <summary> Provides a set of static methods for creating Schedulers. </summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Scheduler.CurrentThread">
      <summary> Returns a CurrentThreadScheduler object which schedules work for processing as soon as possible.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.CurrentThreadScheduler" />
.</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Scheduler.Dispatcher">
      <summary> Gets the scheduler that schedules work on the current Dispatcher.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.DispatcherScheduler" />
.</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Scheduler.Immediate">
      <summary> Returns an ImmediateScheduler object which schedules work for immediate processing on the current thread.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.ImmediateScheduler" />
.</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Scheduler.NewThread">
      <summary> Gets the scheduler that schedules work on a new thread.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.NewThreadScheduler" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Scheduler.Schedule(Microsoft.Phone.Reactive.IScheduler,System.Action,System.DateTimeOffset)">
      <summary> Schedules an <paramref name="action" /> to be executed recursively at time <paramref name="dueTime" />. </summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="scheduler"></param>
      <param name="action"></param>
      <param name="dueTime"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Scheduler.Schedule(Microsoft.Phone.Reactive.IScheduler,System.Action{System.Action{System.DateTimeOffset}},System.DateTimeOffset)">
      <summary> Schedules action to be executed recursively at each specified time interval <paramref name="dueTime" />.  </summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="scheduler"></param>
      <param name="action"></param>
      <param name="dueTime"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Scheduler.Schedule(Microsoft.Phone.Reactive.IScheduler,System.Action{System.Action{System.TimeSpan}},System.TimeSpan)">
      <summary> Schedules action to be executed recursively after each specified time interval <paramref name="dueTime" />. </summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="scheduler"></param>
      <param name="action"></param>
      <param name="dueTime"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Scheduler.Schedule(Microsoft.Phone.Reactive.IScheduler,System.Action{System.Action})">
      <summary> Schedules an <paramref name="action" /> to be executed recursively.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="scheduler"></param>
      <param name="action"></param>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Scheduler.ThreadPool">
      <summary> Gets the scheduler that schedules work on the ThreadPool.</summary>
      <returns>Returns 
<see cref="T:Microsoft.Phone.Reactive.ThreadPoolScheduler" />
.</returns>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Subject`1">
      <summary>Represents an object that is both an observable sequence as well as an observer.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Subject`1.#ctor">
      <summary>Creates a Subject.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Subject`1.OnCompleted">
      <summary>Notifies all subscribed observers of the end of the sequence.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Subject`1.OnError(System.Exception)">
      <summary>Notifies all subscribed observers with the exception.</summary>
      <param name="exception"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Subject`1.OnNext(`0)">
      <summary>Notifies all subscribed observers with the value.</summary>
      <param name="value"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Subject`1.Subscribe(System.IObserver{`0})">
      <summary>Subscribes an observer to the subject.
</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="observer"></param>
    </member>
    <member name="T:Microsoft.Phone.Reactive.SynchronizationContextScheduler">
      <summary>Represents an object that schedules units of work on a provided SynchronizationContext.</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.SynchronizationContextScheduler.#ctor(System.Threading.SynchronizationContext)">
      <summary>Creates an object that schedules units of work on the provided SynchronizationContext.</summary>
      <param name="context"></param>
    </member>
    <member name="P:Microsoft.Phone.Reactive.SynchronizationContextScheduler.Now">
      <summary>Gets the scheduler's notion of current time.
</summary>
      <returns>Returns 
<see cref="T:System.DateTimeOffset" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.SynchronizationContextScheduler.Schedule(System.Action)">
      <summary>Schedules an action to be executed.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="action"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.SynchronizationContextScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>Schedules action to be executed after the specified time span.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="action"></param>
      <param name="dueTime"></param>
    </member>
    <member name="T:Microsoft.Phone.Reactive.TaskObservableExtensions">
      <summary>Provides a set of static methods for converting Tasks to IObservables.
</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.ThreadPoolScheduler">
      <summary>Represents an object that schedules units of work on the threadpool.</summary>
    </member>
    <member name="P:Microsoft.Phone.Reactive.ThreadPoolScheduler.Now">
      <summary>Gets the scheduler's notion of current time.
</summary>
      <returns>Returns 
<see cref="T:System.DateTimeOffset" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ThreadPoolScheduler.Schedule(System.Action)">
      <summary>Schedules an action to be executed.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="action"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.ThreadPoolScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>Schedules an action to be executed.</summary>
      <returns>Returns 
<see cref="T:System.IDisposable" />
.</returns>
      <param name="action"></param>
      <param name="dueTime"></param>
    </member>
    <member name="T:Microsoft.Phone.Reactive.TimeInterval`1">
      <summary> Represents a time interval value.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.TimeInterval`1.#ctor(`0,System.TimeSpan)">
      <summary> Constructs a time interval value. </summary>
      <param name="value"></param>
      <param name="interval"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.TimeInterval`1.Equals(System.Object)">
      <summary>Determines if the specified object is equal to the current <see cref="T:Microsoft.Phone.Reactive.TimeInterval`1" />.</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="obj"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.TimeInterval`1.GetHashCode">
      <summary>Returns the hash code for this object.</summary>
      <returns>Returns 
<see cref="T:System.Int32" />
.</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.TimeInterval`1.Interval">
      <summary> Gets the interval.</summary>
      <returns>Returns 
<see cref="T:System.TimeSpan" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.TimeInterval`1.op_Equality(Microsoft.Phone.Reactive.TimeInterval{`0},Microsoft.Phone.Reactive.TimeInterval{`0})">
      <summary> Returns true if time interval <paramref name="first" /> equals time interval <paramref name="second" />, otherwise returns false.</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="first"></param>
      <param name="second"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.TimeInterval`1.op_Inequality(Microsoft.Phone.Reactive.TimeInterval{`0},Microsoft.Phone.Reactive.TimeInterval{`0})">
      <summary> Returns true if time interval <paramref name="first" /> does not equal time interval <paramref name="second" />, otherwise returns false.</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="first"></param>
      <param name="second"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.TimeInterval`1.ToString">
      <summary>Returns a string representation of this object.
</summary>
      <returns>Returns 
<see cref="T:System.String" />
.</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.TimeInterval`1.Value">
      <summary>Gets the value. </summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Timestamped`1">
      <summary>  Represents a timestamped value.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Timestamped`1.#ctor(`0,System.DateTimeOffset)">
      <summary> Constructs a timestamped value.</summary>
      <param name="value"></param>
      <param name="timestamp"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Timestamped`1.Equals(System.Object)">
      <summary>Determines if the specified object is equal to this one.</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="obj"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Timestamped`1.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>Returns 
<see cref="T:System.Int32" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Timestamped`1.op_Equality(Microsoft.Phone.Reactive.Timestamped{`0},Microsoft.Phone.Reactive.Timestamped{`0})">
      <summary> Returns true if timestamped value <paramref name="first" /> is equal to timestamped value<paramref name=" second" />, false otherwise.</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="first"></param>
      <param name="second"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Timestamped`1.op_Inequality(Microsoft.Phone.Reactive.Timestamped{`0},Microsoft.Phone.Reactive.Timestamped{`0})">
      <summary> Returns true if timestamped value <paramref name="first" /> is not equal to timestamped value<paramref name=" second" />, false otherwise.</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="first"></param>
      <param name="second"></param>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Timestamped`1.Timestamp">
      <summary>Gets the timestamp. </summary>
      <returns>Returns 
<see cref="T:System.DateTimeOffset" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Timestamped`1.ToString">
      <summary>Returns a string representation of this object.
</summary>
      <returns>Returns 
<see cref="T:System.String" />
.</returns>
    </member>
    <member name="P:Microsoft.Phone.Reactive.Timestamped`1.Value">
      <summary> Gets the value.</summary>
    </member>
    <member name="T:Microsoft.Phone.Reactive.Unit">
      <summary> Represents void.
</summary>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Unit.Equals(Microsoft.Phone.Reactive.Unit)">
      <summary> Determines equality of instances.</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="other"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Unit.Equals(System.Object)">
      <summary> Determines equality of instances.</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="obj"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Unit.GetHashCode">
      <summary>Returns the hash code for this object.
</summary>
      <returns>Returns 
<see cref="T:System.Int32" />
.</returns>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Unit.op_Equality(Microsoft.Phone.Reactive.Unit,Microsoft.Phone.Reactive.Unit)">
      <summary> Always returns true.</summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="unit1"></param>
      <param name="unit2"></param>
    </member>
    <member name="M:Microsoft.Phone.Reactive.Unit.op_Inequality(Microsoft.Phone.Reactive.Unit,Microsoft.Phone.Reactive.Unit)">
      <summary> Always returns false. </summary>
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="unit1"></param>
      <param name="unit2"></param>
    </member>
  </members>
</doc>